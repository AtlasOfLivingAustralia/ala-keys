//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.11.13 at 10:31:49 AM EST 
//


package org.lucidcentral._2007.ds;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for DependencyRules complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DependencyRules">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="OnlyApplicableIf" type="{http://www.lucidcentral.org/2007/DS/}StateRefSet" minOccurs="0"/>
 *         &lt;element name="InapplicableIf" type="{http://www.lucidcentral.org/2007/DS/}StateRefSet" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DependencyRules", propOrder = {
    "onlyApplicableIf",
    "inapplicableIf"
})
public class DependencyRules {

    @XmlElement(name = "OnlyApplicableIf")
    protected StateRefSet onlyApplicableIf;
    @XmlElement(name = "InapplicableIf")
    protected StateRefSet inapplicableIf;

    /**
     * Gets the value of the onlyApplicableIf property.
     * 
     * @return
     *     possible object is
     *     {@link StateRefSet }
     *     
     */
    public StateRefSet getOnlyApplicableIf() {
        return onlyApplicableIf;
    }

    /**
     * Sets the value of the onlyApplicableIf property.
     * 
     * @param value
     *     allowed object is
     *     {@link StateRefSet }
     *     
     */
    public void setOnlyApplicableIf(StateRefSet value) {
        this.onlyApplicableIf = value;
    }

    /**
     * Gets the value of the inapplicableIf property.
     * 
     * @return
     *     possible object is
     *     {@link StateRefSet }
     *     
     */
    public StateRefSet getInapplicableIf() {
        return inapplicableIf;
    }

    /**
     * Sets the value of the inapplicableIf property.
     * 
     * @param value
     *     allowed object is
     *     {@link StateRefSet }
     *     
     */
    public void setInapplicableIf(StateRefSet value) {
        this.inapplicableIf = value;
    }

}
